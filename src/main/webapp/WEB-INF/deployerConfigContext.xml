<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">  
       	 
    <util:properties id="properties" location="classpath:jdbc.properties" />
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="#{properties['jdbc.driver']}" />
		<property name="jdbcUrl" value="#{properties['jdbc.url']}" />
		<property name="user" value="#{properties['jdbc.username']}" />
		<property name="password" value="#{properties['jdbc.password']}" />
		<property name="acquireIncrement" value="#{properties['jdbc.acquireIncrement']}" />
	</bean>
	
	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
		<constructor-arg>
			<map>
				<!-- | IMPORTANT | Every handler requires a unique name. | If more than 
					one instance of the same handler class is configured, you must explicitly 
					| set its name to something other than its default name (typically the simple 
					class name). -->
				<entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
				<!-- <entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" 
					/> -->
				<entry key-ref="dbAuthHandler" value-ref="primaryPrincipalResolver" />
			</map>
		</constructor-arg>
		<property name="authenticationPolicy">
			<bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
		</property>
	</bean>

	<!-- Required for proxy ticket mechanism. -->
	<bean id="proxyAuthenticationHandler"
		class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
		p:httpClient-ref="httpClient" p:requireSecure="false" />

	<!-- | TODO: Replace this component with one suitable for your enviroment. 
		| | This component provides authentication for the kind of credential used 
		in your environment. In most cases | credential is a username/password pair 
		that lives in a system of record like an LDAP directory. | The most common 
		authentication handler beans: | | * org.jasig.cas.authentication.LdapAuthenticationHandler 
		| * org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler | * org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandler 
		| * org.jasig.cas.support.spnego.authentication.handler.support.JCIFSSpnegoAuthenticationHandler -->
	<!-- <bean id="primaryAuthenticationHandler" class="org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"> 
		<property name="users"> <map> <entry key="casuser" value="Mellon" /> </map> 
		</property> </bean> -->

	<!-- Required for proxy ticket mechanism -->
	<bean id="proxyPrincipalResolver"
		class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

	<!-- | Resolves a principal from a credential using an attribute repository 
		that is configured to resolve | against a deployer-specific store (e.g. LDAP). -->
	<bean id="primaryPrincipalResolver" class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver">
		<property name="attributeRepository" ref="attributeRepository" />
	</bean>

	<!-- 新增attributeRepository开始 -->
	<!-- <bean id="attributeRepository" class="com.cas.authentication.security.DefaultAttributePersonAttribute">
		<property name="dataSource" ref="dataSource"/>
	</bean> -->
	<bean id="attributeRepository" class="com.cas.authentication.security.DefaultAttributePersonAttribute">
		<constructor-arg index="0" ref="dataSource" />
		<constructor-arg index="1">
			<value>
			SELECT
			a.id,
	    	a.company_id AS "company.id",
	    	a.office_id AS "office.id",
	    	a.login_name as "loginName",
			a.name,
			a.email,
			a.phone,
			a.mobile,
			a.remarks,
			a.photo
	    	FROM sys_user a
			WHERE a.{0} AND a.del_flag = 0
			</value>
		</constructor-arg>
		<property name="queryAttributeMapping">
			<map>
				<!-- key对应username，value对应数据库用户名字段 -->
				<entry key="username" value="login_name" />
			</map>
		</property>
		<property name="resultAttributeMapping">
			<map>
				<!--key为对应的数据库字段名称，value为提供给客户端获取的属性名字，系统会自动填充值 -->
				<entry key="id" value="id" />
				<entry key="company.id" value="company.id" />
				<entry key="office.id" value="office.id" />
				<entry key="loginName" value="loginName" />
				<entry key="name" value="name" />
				<entry key="email" value="email" />
				<entry key="phone" value="phone" />
				<entry key="mobile" value="mobile" />
				<entry key="remarks" value="remarks" />
				<entry key="photo" value="photo" />
			</map>
		</property>
	</bean>
	
	<!-- 新增attributeRepository结束 -->


	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation 
		would probably want to replace this with the JPA-backed ServiceRegistry DAO 
		The name of this bean should remain "serviceRegistryDao". + -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
		p:registeredServices-ref="registeredServicesList" />

	<util:list id="registeredServicesList">
		<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="0"
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
			p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001" />
	</util:list>

	<!-- 添加审计日志，注释掉log4jbean -->
	<!-- <bean id="auditTrailManager"
		class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" /> -->

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor"
		p:monitors-ref="monitorsList" />

	<util:list id="monitorsList">
		<bean class="org.jasig.cas.monitor.MemoryMonitor"
			p:freeMemoryWarnThreshold="10" />
		<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
			* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
		<bean class="org.jasig.cas.monitor.SessionMonitor"
			p:ticketRegistry-ref="ticketRegistry"
			p:serviceTicketCountWarnThreshold="5000" p:sessionCountWarnThreshold="100000" />
	</util:list>

	<!-- <bean id="dbAuthHandler" class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"> -->
	<bean id="dbAuthHandler" class="com.cas.authentication.handler.JdbcUsernamePasswordAuthenticationHandler">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="select password,login_flag from sys_user where login_name=? and DEL_FLAG = '0'" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<!-- 密码加密方式 -->
	<bean id="passwordEncoder" class="com.cas.authentication.handler.AuthPasswordEncoder" />
</beans>
